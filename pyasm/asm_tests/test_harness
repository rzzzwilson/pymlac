#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
A test harness for code to test 'pyasm'.

Usage: test_harness [ -h ] [ -d <directory> ] [ -p <prefix> ]

Where <prefix> is the test filename prefix of files to test,
      <directory> is a directory of test files.

If <directory> is specified run tests in that directory.  If not specified
the test directory is assumed to be './tests'.

If <prefix> is specified, run tests on files in the test subdirectory with
a filename of <prefix>* .  If <prefix> is not specified all files are tested.
"""


import sys
import os
import glob
import getopt
import tempfile
import shutil


TestDirectory = './tests'
TempPrefix = '_#TEMP#_'


def test_file(filename):
    """Test one ASM test file."""

    print('test_file: testing %s' % filename)

    # assemble file into known listing file and PTP file
    lst_file = '%s.lst' % TempPrefix
    ptp_file = '%s.ptp' % TempPrefix
    cmd = ('../pyasm -o %s -l %s %s >/dev/null 2>&1'
           % (ptp_file, lst_file, filename))
    status = os.system(cmd)
    if status:
        print("Error assembling file '%s'" % filename)
        return
    os.remove(lst_file)

    print('processing %s' % ptp_file)
    # get the test instructions from the ASM file
    with open(filename, 'rb') as handle:
        lines = handle.readlines()
    lines = [line.rstrip() for line in lines]
    print('lines=%s' % str(lines))
    tests = []
    seen_code = False
    for line in lines:
        if line.startswith(';'):
            if seen_code is True:
                tests.append(line[1:].strip())
        else:
            seen_code = True
    print('tests=%s' % str(tests))
    # get the generated code from the PTP file

    # interpret the test instructions and check generated code

def error(msg):
    """Print error message and stop."""

    print('\n%s\n\n' % msg)
    sys.exit(10)

def run_tests(directory, prefix):
    """Run all appropriate test cases.

    directory  path to directory holding test cases
    prefix     filename prefix of tests to run (may be None).
    """

    # handle 'all' case
    if prefix is None:
        prefix = ''

    # get list of all test cases we are going to run
    files = glob.glob('%s/%s*' % (directory, prefix))
    if not files:
        if prefix:
            error("No test files found in directory '%s' with prefix '%s'"
                  % (directory, prefix))
        else:
            error("No test files found in directory '%s'" % directory)

    # test each found file
    files.sort()
    for filename in files:
        test_file(filename)

    # remove temporary files
    for f in glob.glob('%s.*' % TempPrefix):
        os.remove(f)

def usage(msg=None):
    """Print usage and optional error message."""

    if msg is not None:
        print('*'*60)
        print(msg)
        print('*'*60)
    print(__doc__)

def main():
    """The test harness."""

    # handle the options
    try:
        (opts, args) = getopt.gnu_getopt(sys.argv, 'd:hp:',
                                         ['directory=', 'help', 'prefix='])
    except getopt.GetoptError:
        usage()
        sys.exit(10)

    prefix = None
    directory = TestDirectory

    for opt, arg in opts:
        if opt in ('-d', '--directory'):
            directory = arg
        elif opt in ('-h', '--help'):
            usage()
            sys.exit(0)
        elif opt in ('-p', '--prefix'):
            prefix = arg

    run_tests(directory, prefix)

if __name__ == '__main__':
    main()
